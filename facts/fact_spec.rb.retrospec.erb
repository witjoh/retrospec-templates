require 'spec_helper'
require 'facter'
require 'facter/<%= fact_name %>'

describe <%= fact_name.to_sym.inspect %>, :type => :fact do
  subject(:fact) { Facter.fact(subject) }

  before :all do
    # perform any action that should be run for the entire test suite
  end

  before :each do
    # perform any action that should be run before every test
    Facter.clear
    <%- used_facts.each do |name, fact_data| -%>
    allow(Facter.fact(<%= name.inspect %>)).to receive(:value).and_return('replace_me')
    <%- end -%>
    # This will mock the facts that confine uses to limit facts running under certain conditions
  <%- confines.each do |k,v|-%>
    allow(Facter.fact(<%= k.inspect %>)).to receive(:value).and_return(<%= v.inspect %>)
  <%- end -%>
  <%- unless exec_calls.empty? -%>
    # below is how you mock responses from the command line
    # you will need to built tests that plugin different mocked values in order to fully test your facter code
  <%- end -%>  
  <%- exec_calls.each do |cmd, data| -%>
    allow(<%= data[:klass] %>).to receive(<%= data[:method].inspect %>).with(<%= cmd.inspect %>).and_return('mocked_value123')
  <%- end -%>
  end

  it 'should return a value' do
    expect(Facter.fact(<%= fact_name.to_sym.inspect %>).value).to eq('value123')  #<-- change the value to match your expectation
  end
end